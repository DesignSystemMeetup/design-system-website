const VERSION = "1.0.57";
const NAME = `design-system-meetup-${VERSION}`;


self.oninstall = evt => {
	evt.waitUntil(
		caches.open( NAME )
		.then((cache) => {
			return cache.addAll([
				'/',
				'/index.html',
				'/assets/css/site.min.css',
				'/assets/img/atlassian.png',
				'/assets/img/dta.png',
				'/assets/img/expert360.png',
				'/assets/img/invision.png',
				'/assets/img/og-image.jpg',
				'/assets/img/thinkmill.png',
				'/assets/img/tomwalker.png',
				'/assets/img/zip.png',
				'/assets/js/script.min.js',
				'/assets/svg/sprite.svg',
				'/code-of-conduct/index.html',
				'/v1.0.0/',
				'/v1.0.0/index.html',
				'/v2.0.0/',
				'/v2.0.0/index.html',
				'/v3.0.0/',
				'/v3.0.0/index.html',
			]);
		})
	);

	// replaces the old one automatically
	self.skipWaiting();
};

self.onactivate = evt => {
	console.log("On Activate");

	evt.waitUntil(
		caches
		.keys()
		.then((cacheNames) => {
			const deleteOldCaches = cacheNames.map((cacheName) => {
				if (cacheName !== NAME){
					return caches.delete(cacheName);
				}
				// Leave the current cache along
				return Promise.resolve;
			});

			//removing old cache
			return Promise.all(deleteOldCaches);
		})
	)

	//ensures all open tabs use new service worker
	self.clients.claim();

};


self.onfetch = evt => {
	//evt.waitUntil(
	evt.respondWith(
		caches.open(NAME).then(function(cache) {

			//checks if it's in cache
			return cache.match(evt.request).then(function(cacheResponse) {

			  // fetches latest resource from server
			  var fetchPromise = fetch(evt.request).then(function(networkResponse) {
				cache.put(evt.request, networkResponse.clone());
				return networkResponse;
			  })
			  return cacheResponse || fetchPromise;
			})
		  })
	);
};
